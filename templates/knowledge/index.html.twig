{% extends 'base.html.twig' %}

{% block title %}Kip - {{ filename }}{% endblock %}

{% block body %}
    {% if not edition %}
        <div class="container">
            <div class="left-opener"></div>
            <div class="left-column">  {{ render(controller('App\\Controller\\System\\EmbeddedController::leftMenu',{"path":rawPath})) }}  </div>
            <div class="center-column">

                <div class="page-content" id="top">
                    <div class="breadcrumb" aria-label="breadcrumbs">
                        <ul>
                            {% set items = rawPath | split("/") %}
                            {% for item in items %}
                                {% set uri= items|slice(0, loop.index)|join("/") %}
                                {% if(uri==rawPath) %}
                                    <li class="is-active">

                                        <a>{{ item }}</a>
                                    </li>
                                {% else %}
                                    <li>
                                        <a href="{{ path( "knowledge_read",{path:  uri }) }}">{{ item }}</a>

                                    </li>
                                {% endif %}

                            {% endfor %}
                        </ul>
                    </div>
                    {% if content|length ==0 %}
                        <h1>404 - File Empty or not found!</h1>
                        <p>This file seems empty/inexistant, but don't worry and start <a
                                    href="{{ path("knowledge_read",{path:rawPath, _edit:true}) }}">
                                <span><i class="fad fa-edit"></i></span>
                                Edit it
                            </a>.
                        </p>
                    {% endif %}
                    {{ content|raw }}
                </div>


                <div class="aside-right">
                    <div>
                        <nav>
                            <a class="navbar-item" href="#top">
                        <span class="icon has-text-dark">
                        <i class="fad fa-arrow-up"></i>
                        </span>
                            </a>
                            <a href="{{ path("knowledge_read",{path:rawPath, _edit:true}) }}">
                                <andpan><i class="fad fa-edit"></i></andpan>
                            </a>
                            <a href="{{ path('documents_delete',{path:filename}) }}"
                               onclick="confirm('are you sure?')">
                                <span><i class="fas fa-trash"></i></span>
                            </a>
                        </nav>
                        <ul>
                            <li class="">
                                <p> Table of content </p>

                                {% include "knowledge/rightMenu.html.twig" %}
                            </li>
                        </ul>

                    </div>


                </div>
            </div>

        </div>
    {% else %}

        <div class="editor">
            <progress style="display:none;" id="progress-upload" class="progress is-success"
                      max="100"></progress>

            <textarea id="text-content">{{ raw }}</textarea>
            <form style="display: none;" method="post" action="{{ path('media_store') }}"
                  enctype="multipart/form-data">
                <input id="fileUploader" type="file" name="media"/>
                <button>send</button>
            </form>
        </div>


    {% endif %}


{% endblock %}
{% block stylesheets %}
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.css">
{% endblock %}

{% block javascripts %}
    {% if not edition %}

        <script>
            function hideLeft() {
                $(".left-column").addClass("hidden");

            }

            function showLeft() {
                $(".left-column").removeClass("hidden");

            }

            $(document).ready(function () {
                var currentHash = window.location.hash;
                $(".center-column").scroll(function () {

                    $('.title').each(function () {
                        var top = window.pageYOffset;
                        var distance = top - $(this).offset().top;
                        var hash = $(this).attr('id');

                        if (distance < 30 && distance > -30 && currentHash != hash) {
                            $('a').removeClass('active');

                            $('.aside-right a[href="#' + hash + '"]').addClass('active');
                            currentHash = hash;
                        }
                    });
                });
            });</script>
    {% else %}
        <script src="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.js"></script>
        <script>
            function save(content, callback) {
                let xhr = new XMLHttpRequest();
                xhr.open("PUT", "{{ path('documents_store',{path: filename}) }}");
                xhr.send(content);
                xhr.onload = function () {
                    callback(xhr.status < 300 && xhr.status > 199);
                };
            }


            var simplemde = new SimpleMDE({
                autosave: {
                    enabled: true,
                    uniqueId: "{{ rawPath }}",
                    delay: 1000,
                },
                toolbar: [
                    {
                        name: "close",
                        action: function (editor) {
                            saveOnQuit()
                        },
                        className: "fa fa-close",
                        title: "Save and Close"
                    },
                    "bold", "italic", "heading", "|", "quote", "unordered-list", "ordered-list", "|", "link",
                    {
                        name: "image",
                        action: function (editor) {
                            fileUploader = document.getElementById("fileUploader")
                            fileUploader.onchange = function () {
                                var file = this.files[0];
                                var request = new XMLHttpRequest();
                                var data = new FormData();
                                data.append('media', fileUploader.files[0]);
                                data.append("path", "{{ rawPath }}");
                                document.getElementById("progress-upload").style.display = "block";
                                request.upload.addEventListener('progress', function (e) {
                                    var percent_complete = (e.loaded / e.total) * 100;


                                    document.getElementById("progress-upload").value = percent_complete;
                                });
                                request.addEventListener('load', function (e) {
                                    setTimeout(function () {
                                        document.getElementById("progress-upload").style.display = "none";

                                    }, 1000);
                                    if (request.status != 200) {
                                        alert("something wrong happened");
                                        return;
                                    }
                                    // request.response will hold the response from the server
                                    fileUploader.value = null
                                    var options = editor.options;

                                    var cm = editor.codemirror;
                                    var stat = editor.getState(cm);


                                    var url = JSON.parse(request.response).filename;
                                    _replaceSelection(cm, stat.image, options.insertTexts.image, url);
                                });
                                request.open('post', '{{ path("media_store") }}');
                                request.send(data);

                            };
                            fileUploader.click()


                        },
                        className: "fa fa-image",
                        title: "Upload Image"
                    }
                ],
            });
            simplemde.codemirror.on("change", function () {
                console.log(simplemde.value());
            });
            setInterval(function () {
                var content = simplemde.value();
                save(content, function () {
                });
            }, 10000);

            function saveOnQuit() {
                var content = simplemde.value();
                save(content, function () {
                    window.location.href = "{{ path("knowledge_read",{ path:rawPath}) }}"

                });
            }

            const el = document.querySelector('textarea');


            function _replaceSelection(cm, active, startEnd, url) {
                if (/editor-preview-active/.test(cm.getWrapperElement().lastChild.className))
                    return;

                var text;
                var start = startEnd[0];
                var end = startEnd[1];
                var startPoint = cm.getCursor("start");
                var endPoint = cm.getCursor("end");
                if (url) {
                    end = end.replace("#url#", url);
                }
                if (active) {
                    text = cm.getLine(startPoint.line);
                    start = text.slice(0, startPoint.ch);
                    end = text.slice(startPoint.ch);
                    cm.replaceRange(start + end, {
                        line: startPoint.line,
                        ch: 0
                    });
                } else {
                    text = cm.getSelection();
                    cm.replaceSelection(start + text + end);

                    startPoint.ch += start.length;
                    if (startPoint !== endPoint) {
                        endPoint.ch += start.length;
                    }
                }
                cm.setSelection(startPoint, endPoint);
                cm.focus();
            }
        </script>
    {% endif %}
{% endblock %}