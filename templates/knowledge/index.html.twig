{% extends 'base.html.twig' %}

{% block title %}Kip - {{ filename }}{% endblock %}


{% block body %}

    <div class="columns">
        <div class="column is-3">  {{ render(controller('App\\Controller\\System\\EmbeddedController::leftMenu',{"path":rawPath})) }}  </div>
        <div class="column  is-6">
            <nav class="breadcrumb" aria-label="breadcrumbs">
                <ul>
                    {% set items = rawPath | split("/") %}
                    {% for item in items %}
                        {% set uri= items|slice(0, loop.index)|join("/") %}
                        {% if(uri==rawPath) %}
                            <li class="is-active">

                                <a>{{ item }}</a>
                            </li>
                        {% else %}
                            <li>
                                <a href="{{ path( "knowledge_read",{path:  uri }) }}">{{ item }}</a>

                            </li>
                        {% endif %}

                    {% endfor %}
                </ul>
            </nav>
            {% if content|length ==0 %}
                <h1>404 - File Empty or not found!</h1>
                <p>This file seems empty/inexistant, but don't worry and start <a href="#" onclick="openEditor()">Edit
                        it</a>
                </p>
            {% endif %}
            {{ content|raw }}
        </div>
        <div class="column is-3">
            <div class="card">
                <div class="card-header">
                    <div class="card-header-title">
                        {{ rawPath }}
                    </div>
                </div>
                <div class="card-content">
                    <div class="menu">
                        <ul class="menu-list">
                            <li class=" uk-nav-header">
                            </li>
                            <li>
                                <a href="#top"><i class="fad fa-arrow-up"></i> Scroll to top</a>
                                <a class="btn btn-primary" href="#" onclick="openEditor()"><i class="fad fa-edit"></i>
                                    Edit</a>
                                <a class="btn btn-danger" href="{{ path('documents_delete',{path:filename}) }}"
                                   onclick="confirm('are you sure?')"><i class="fad fa-trash"></i> Delete</a>
                            </li>
                            <li class=" uk-nav-header">
                                Table of content
                            </li>
                            {% for item in table %}
                                <li class="nav-link">

                                    <a href="#{{ item.id }}">
                                        {% for i in range(1, item.level) %}#{% endfor %} {{ item.text }}
                                    </a>
                                </li>
                            {% endfor %}
                        </ul>
                    </div>
                </div>
                <footer class="card-footer">
                    <a href="#top" class="card-footer-item"><i class="fad fa-arrow-up"></i> Scroll to top</a>
                    <a class="card-footer-item" href="#" onclick="openEditor()"><i class="fad fa-edit"></i>
                        Edit</a>
                    <a class="card-footer-item" href="{{ path('documents_delete',{path:filename}) }}"
                       onclick="confirm('are you sure?')"><i class="fad fa-trash"></i> Delete</a>
                </footer>
            </div>
        </div>
    </div>


{% endblock %}

{% block javascripts %}
    <script src="https://unpkg.com/stackedit-js@1.0.7/docs/lib/stackedit.min.js"></script>
    <textarea style="display: none;">{{ raw }}</textarea>
    <script>
        const stackedit = new Stackedit();
        const el = document.querySelector('textarea');

        function openEditor() {
            // Open the iframe
            stackedit.openFile({
                name: '{{ filename }}', // with an optional filename
                content: {
                    text: el.value // and the Markdown content.
                }
            });
            setInterval(function () {
                save(el.value, function (ok) {
                    if (!ok) {

                        alert("auto save failed!");
                    }

                })
            }, 20000);
        }


        stackedit.on('fileChange', (file) => {
            el.value = file.content.text
        });
        stackedit.on('close', () => {
            save(el.value, function (ok) {
                if (ok) {
                    location.reload()
                } else {
                    alert("an error occured, reopen the editor to save again.");
                }

            })

        });

        function save(content, callback) {
            let xhr = new XMLHttpRequest();
            xhr.open("PUT", "{{ path('documents_store',{path: filename}) }}");
            xhr.send(content);
            xhr.onload = function () {
                callback(xhr.status < 300 && xhr.status > 199);
            };
        }


    </script>
{% endblock %}